/**************************************************************
WinFilter version 0.8
http://www.winfilter.20m.com
akundert@hotmail.com

Filter type: Low Pass
Filter model: Butterworth
Filter order: 4
Sampling Frequency: 66 MHz
Cut Frequency: 2.500000 MHz
Coefficents Quantization: 16-bit

Z domain Zeros
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000

Z domain Poles
z = 0.799860 + j -0.073486
z = 0.799860 + j 0.073486
z = 0.892627 + j -0.197988
z = 0.892627 + j 0.197988
***************************************************************/
#define Ntap 31

#define DCgain 262144

__int16 fir(__int16 NewSample) {
    __int16 FIRCoef[Ntap] = { 
        -2024,
        -1717,
        -1172,
         -355,
          764,
         2206,
         3975,
         6059,
         8422,
        11001,
        13700,
        16388,
        18893,
        20999,
        22444,
        22966,
        22444,
        20999,
        18893,
        16388,
        13700,
        11001,
         8422,
         6059,
         3975,
         2206,
          764,
         -355,
        -1172,
        -1717,
        -2024
    };

    static __int16 x[Ntap]; //input samples
    __int32 y=0;            //output sample
    int n;

    //shift the old samples
    for(n=Ntap-1; n>0; n--)
       x[n] = x[n-1];

    //Calculate the new output
    x[0] = NewSample;
    for(n=0; n<Ntap; n++)
        y += FIRCoef[n] * x[n];
    
    return y / DCgain;
}
